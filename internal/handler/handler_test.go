package handler

import (
	"testing"

	"github.com/aws/aws-lambda-go/events"

	"github.com/fre5h/rnokpp-telegram-bot/internal/mocks"
)

func TestHandleLambdaRequestInvalidUpdateId(t *testing.T) {
	handler := NewLambdaHandler(mocks.NewMockOkClient())
	response, _ := handler.HandleLambdaRequest(events.LambdaFunctionURLRequest{Body: "{\"update_id\":0}"})

	if response.StatusCode != 400 {
		t.Errorf("Expected status code 400, got %d", response.StatusCode)
	}
}

func TestHandleLambdaRequestErrorOnUnmarshal(t *testing.T) {
	handler := NewLambdaHandler(mocks.NewMockOkClient())
	response, _ := handler.HandleLambdaRequest(events.LambdaFunctionURLRequest{Body: "123"})

	if response.StatusCode != 500 {
		t.Errorf("Expected status code 500, got %d", response.StatusCode)
	}
}

func TestHandleLambdaRequestSuccessfully(t *testing.T) {
	handler := NewLambdaHandler(mocks.NewMockOkClient())
	response, _ := handler.HandleLambdaRequest(events.LambdaFunctionURLRequest{Body: `{"update_id":1,"message":{"text":"–ø—Ä–∏–≤—ñ—Ç","chat":{"id":1}}}`})

	if response.StatusCode != 200 {
		t.Errorf("Expected status code 200, got %d", response.StatusCode)
	}
}

func TestHandleLambdaRequestUnsuccessfullyRequestToTelegram(t *testing.T) {
	handler := NewLambdaHandler(mocks.NewMockFailedClient())
	response, _ := handler.HandleLambdaRequest(events.LambdaFunctionURLRequest{Body: `{"update_id":1,"message":{"text":"–ø—Ä–∏–≤—ñ—Ç","chat":{"id":1}}}`})

	if response.StatusCode != 500 {
		t.Errorf("Expected status code 500, got %d", response.StatusCode)
	}
}

func TestPrepareResult(t *testing.T) {
	if prepareResult("") != "ü§î –í–∏–±–∞—á–∞–π—Ç–µ, –∞–ª–µ —è –≤–º—ñ—é —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä—É–≤–∞—Ç–∏ –ª–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è" {
		t.Error("Expected another result for empty string")
	}

	if prepareResult("/start") != "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ üá∫üá¶ —ñ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–æ–≤–∞–Ω–∏–π üá¨üáß —Ç–µ–∫—Å—Ç" {
		t.Error("Expected another result for /start command")
	}

	result := prepareResult("—Ç–µ—Å—Ç")
	if result != "test" {
		t.Errorf("Expected \"test\", got %s", result)
	}
}
